https://courses.lumenlearning.com/math4liberalarts/chapter/introduction-euler-paths/

EULER CIRCUITS AND PATHS
==========================

Euler Paths
An Euler path is a path that uses every edge in a graph with no repeats. Being a path, it does not have to return to
the starting vertex.

Euler Circuits
An Euler circuit is a circuit that uses every edge in a graph with no repeats. Being a circuit, it must start and end
at the same vertex.

EULER’S PATH AND CIRCUIT THEOREMS
A graph will contain an Euler path if it contains at most two vertices of odd degree.
A graph will contain an Euler circuit if all vertices have even degree

FLEURY’S ALGORITHM
1. Start at any vertex if finding an Euler circuit. If finding an Euler path, start at one of the two vertices with
    odd degree.
2. Choose any edge leaving your current vertex, provided deleting that edge will not separate the graph into two
    disconnected sets of edges. (in a real scenario the algorithm can make any choice since with backtracking we can
    cover other paths).
3. Add that edge to your circuit, and delete it from the graph.
4. Continue until you’re done.

Hierholzer's algorithm
Hierholzer's 1873 paper provides a different method for finding Euler cycles that is more efficient than Fleury's
algorithm:

Choose any starting vertex v, and follow a trail of edges from that vertex until returning to v. It is not possible to
get stuck at any vertex other than v, because the even degree of all vertices ensures that, when the trail enters
another vertex w there must be an unused edge leaving w. The tour formed in this way is a closed tour, but may not cover
all the vertices and edges of the initial graph.
As long as there exists a vertex u that belongs to the current tour but that has adjacent edges not part of the tour,
start another trail from u, following unused edges until returning to u, and join the tour formed in this way to the
previous tour.
Since we assume the original graph is connected, repeating the previous step will exhaust all edges of the graph.
By using a data structure such as a doubly linked list to maintain the set of unused edges incident to each vertex, to
maintain the list of vertices on the current tour that have unused edges, and to maintain the tour itself, the
individual operations of the algorithm (finding unused edges exiting each vertex, finding a new starting vertex for a
tour, and connecting two tours that share a vertex) may be performed in constant time each, so the overall algorithm
takes linear time, {\displaystyle O(|E|)}O(|E|).[8]

This algorithm may also be implemented with a queue. Because it is only possible to get stuck when the queue represents
a closed tour, one should rotate the queue (remove an element from the head and add it to the tail) until unstuck, and
continue until all edges are accounted for. This also takes linear time, as the number of rotations performed is never
larger than {\displaystyle |E|}|E|.


HAMILTONIAN CIRCUITS AND PATHS
==========================
A Hamiltonian circuit is a circuit that visits every vertex once with no repeats. Being a circuit, it must start and end
at the same vertex. A Hamiltonian path also visits every vertex once with no repeats, but does not have to start and
end at the same vertex.


BRUTE FORCE ALGORITHM (A.K.A. EXHAUSTIVE SEARCH)
1.     List all possible Hamiltonian circuits
2.     Find the length of each circuit by adding the edge weights
3.     Select the circuit with minimal total weight.

NEAREST NEIGHBOR ALGORITHM (NNA)
1.     Select a starting point.
2.     Move to the nearest unvisited vertex (the edge with smallest weight).
3.     Repeat until the circuit is complete.

